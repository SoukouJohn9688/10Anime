#spring.datasource.url=${SPRING_DATASOURCE_URL}
#spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
#spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}


spring.application.name=10Anime

spring.security.user.name=${ADMIN_USER}
spring.security.user.password=${ADMIN_PASS}
spring.security.user.roles=ADMIN






# Google Login
spring.security.oauth2.client.registration.google.client-id=${GGL_CLID}
spring.security.oauth2.client.registration.google.client-secret=${GGL_SCRT}

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

#Initialize Docker Compose
spring.docker.compose.enabled=true
spring.docker.compose.lifecycle-management=start_only

# GitHub Login
#spring.security.oauth2.client.registration.github.client-id=${GIT_CLID}
#spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.github.client-secret=${GIT_SCRT}
#spring.security.oauth2.client.registration.keycloak.scope=openid

#Keycloak Login
spring.security.oauth2.client.registration.keycloak.client-id=10Anime-client-api
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid


spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:9000/realms/10Anime_Realm

#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:9000/realms/10Anime_Realm/protocol/openid-connect/certs
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:9000/realms/10Anime_Realm



jwt.auth.converter.resource-id=10Anime-client-api
jwt.auth.converter.principle-attribute=preferred_username

logging.level.org.springframework=DEBUG